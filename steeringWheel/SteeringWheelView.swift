//
// SteeringWheelView.swift
// Generated by Core Animator version 1.0.5 on 6/29/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class SteeringWheelView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 255, height: 254))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:255, height:254)
		__scaling__.center = CGPoint(x:127.7, y:127.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let steeringwheel = UIImageView()
		steeringwheel.bounds = CGRect(x:0, y:0, width:250.0, height:250.0)
		var imgSteeringwheel: UIImage!
		if let imagePath = bundle.pathForResource("steeringwheel.png", ofType:nil) {
			imgSteeringwheel = UIImage(contentsOfFile:imagePath)
		}
		steeringwheel.image = imgSteeringwheel
		steeringwheel.contentMode = .Center;
		steeringwheel.layer.position = CGPoint(x:125.000, y:125.000)
		__scaling__.addSubview(steeringwheel)
		viewsByName["steeringwheel"] = steeringwheel

		self.viewsByName = viewsByName
	}

	// - MARK: turnLeft

	func addTurnLeftAnimation() {
		addTurnLeftAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addTurnLeftAnimation(completion: ((Bool) -> Void)?) {
		addTurnLeftAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addTurnLeftAnimation(#removedOnCompletion: Bool) {
		addTurnLeftAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addTurnLeftAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addTurnLeftAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addTurnLeftAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "TurnLeft")
			self.animationCompletions[layer.animationForKey("TurnLeft")] = complete
		}

		let steeringwheelRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		steeringwheelRotationAnimation.duration = 0.500
		steeringwheelRotationAnimation.values = [0.000 as Float, -6.283 as Float]
		steeringwheelRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		steeringwheelRotationAnimation.timingFunctions = [linearTiming]
		steeringwheelRotationAnimation.beginTime = beginTime
		steeringwheelRotationAnimation.fillMode = fillMode
		steeringwheelRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["steeringwheel"]?.layer.addAnimation(steeringwheelRotationAnimation, forKey:"turnLeft_Rotation")
	}

	func removeTurnLeftAnimation() {
		self.layer.removeAnimationForKey("TurnLeft")
		self.viewsByName["steeringwheel"]?.layer.removeAnimationForKey("turnLeft_Rotation")
	}

	// - MARK: turnRight

	func addTurnRightAnimation() {
		addTurnRightAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addTurnRightAnimation(completion: ((Bool) -> Void)?) {
		addTurnRightAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addTurnRightAnimation(#removedOnCompletion: Bool) {
		addTurnRightAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addTurnRightAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addTurnRightAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addTurnRightAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "TurnRight")
			self.animationCompletions[layer.animationForKey("TurnRight")] = complete
		}

		let steeringwheelRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		steeringwheelRotationAnimation.duration = 0.500
		steeringwheelRotationAnimation.values = [0.000 as Float, 6.283 as Float]
		steeringwheelRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		steeringwheelRotationAnimation.timingFunctions = [linearTiming]
		steeringwheelRotationAnimation.beginTime = beginTime
		steeringwheelRotationAnimation.fillMode = fillMode
		steeringwheelRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["steeringwheel"]?.layer.addAnimation(steeringwheelRotationAnimation, forKey:"turnRight_Rotation")
	}

	func removeTurnRightAnimation() {
		self.layer.removeAnimationForKey("TurnRight")
		self.viewsByName["steeringwheel"]?.layer.removeAnimationForKey("turnRight_Rotation")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("TurnRight")
		self.layer.removeAnimationForKey("TurnLeft")
	}
}